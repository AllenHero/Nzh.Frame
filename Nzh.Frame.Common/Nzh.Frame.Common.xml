<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nzh.Frame.Common</name>
    </assembly>
    <members>
        <member name="T:Nzh.Frame.Common.Helper.CsvHelper">
            <summary>
            Csv辅助类 
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.CsvHelper.dt2csv(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            导出报表为Csv
            </summary>
            <param name="dt">DataTable</param>
            <param name="strFilePath">物理路径</param>
            <param name="tableheader">表头</param>
            <param name="columname">字段标题,逗号分隔</param>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.CsvHelper.csv2dt(System.String,System.Int32,System.Data.DataTable)">
            <summary>
            将Csv读入DataTable
            </summary>
            <param name="filePath">csv文件路径</param>
            <param name="n">表示第n行是字段title,第n+1行是记录开始</param>
            <param name="dt">DataTable</param> 
        </member>
        <member name="T:Nzh.Frame.Common.Helper.DataTableHelper">
            <summary>
             DataTable辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DataTableHelper.ToEntity``1(System.Data.DataTable)">
            <summary>
             DataTable转实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DataTableHelper.ToEntities``1(System.Data.DataTable)">
            <summary>
            实体转DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.DateHelper">
            <summary>
            日期辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.BeginDay(System.DateTime)">
            <summary>
            开始时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.EndDay(System.DateTime)">
            <summary>
            结束时间
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.BeginDay(System.Nullable{System.DateTime})">
            <summary>
             开始时间（可为空）
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.EndDay(System.Nullable{System.DateTime})">
            <summary>
            结束时间（可为空）
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetThisMonth(System.DateTime)">
            <summary>
            这个月
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetLastMonth(System.DateTime)">
            <summary>
            上个月
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetThisWeek(System.DateTime)">
            <summary>
            这周
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetLastWeek(System.DateTime)">
            <summary>
            上周
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetNextWeek(System.DateTime)">
            <summary>
            下周
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetThisSeason(System.DateTime)">
            <summary>
            这季度
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetLastSeason(System.DateTime)">
            <summary>
            上季度
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetThisYear(System.DateTime)">
            <summary>
            这年
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetLastYear(System.DateTime)">
            <summary>
            去年
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateHelper.GetYearRanges(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
             年范围
            </summary>
            <param name="dateTime"></param>
            <param name="startDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.YearRange">
            <summary>
            年范围
            </summary>
        </member>
        <member name="P:Nzh.Frame.Common.Helper.YearRange.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Nzh.Frame.Common.Helper.YearRange.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.DateRange">
            <summary>
            天范围
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateRange.#ctor">
            <summary>
            天范围
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DateRange.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            天范围
            </summary>
            <param name="dateStart"></param>
            <param name="dateEnd"></param>
        </member>
        <member name="P:Nzh.Frame.Common.Helper.DateRange.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="P:Nzh.Frame.Common.Helper.DateRange.End">
            <summary>
            结束 
            </summary>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.DecryptionHelper">
            <summary>
            Decryption辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DecryptionHelper.AesDecrypt(System.String,System.String)">
            <summary>
             AES 解密
            </summary>
            <param name="str">明文（待解密）</param>
            <param name="key">密文</param>
            <returns></returns>
        </member>
        <member name="F:Nzh.Frame.Common.Helper.DecryptionHelper._KEY">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="F:Nzh.Frame.Common.Helper.DecryptionHelper._IV">
            <summary>
            向量
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DecryptionHelper.DesDecrypt(System.String)">
            <summary>
            DES解密操作
            </summary>
            <param name="securityTxt">加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.DecryptionHelper.MD5Decrypt(System.String,System.String)">
            <summary>
            MD5解密
            </summary>
            <param name="pToDecrypt"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.EncryptionHelper">
            <summary>
            Encryption辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.EncryptionHelper.AesEncrypt(System.String,System.String)">
            <summary>
             AES 加密
            </summary>
            <param name="str">明文（待加密）</param>
            <param name="key">密文</param>
            <returns></returns>
        </member>
        <member name="F:Nzh.Frame.Common.Helper.EncryptionHelper._KEY">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="F:Nzh.Frame.Common.Helper.EncryptionHelper._IV">
            <summary>
            向量
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.EncryptionHelper.DesEncrypt(System.String)">
            <summary>
            DES加密操作
            </summary>
            <param name="normalTxt"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.EncryptionHelper.MD5Encrypt(System.String,System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="pToEncrypt"></param>
            <param name="sKey"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.FileHelper">
            <summary>
            File辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.FileHelper.WriteToFile(System.String,System.String,System.Boolean)">
            <summary>
            将字符串写入到文件中
            </summary>
            <param name="filePath">文件的实际路径</param>
            <param name="content">内容</param>
            <param name="isCover">是否覆盖，true就是重新写一遍，false就是往里面添加内容</param>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.JsonHelper">
            <summary>
            Json辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.SerializeObject(System.Object)">
            <summary>
            对象转Json
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.DeserializeJsonToObject``1(System.String)">
            <summary>
            Json转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.String2Json(System.String)">
            <summary>
            过滤特殊字符
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.StringFormat(System.String,System.Type)">
            <summary>
            格式化字符型、日期型、布尔型
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ListToJson``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转换成Json
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转换成Json 
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ToJson(System.Object)">
            <summary> 
            对象转换为Json 
            </summary> 
            <param name="jsonObject">对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ToJson(System.Collections.IEnumerable)">
            <summary> 
            对象集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ToArrayString(System.Collections.IEnumerable)">
            <summary> 
            普通集合转换Json 
            </summary> 
            <param name="array">集合对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ToJson(System.Data.DataSet)">
            <summary> 
            DataSet转换为Json 
            </summary> 
            <param name="dataSet">DataSet对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ToJson(System.Data.DataTable)">
            <summary> 
            Datatable转换为Json 
            </summary> 
            <param name="dt">Datatable对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转换为Json 
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.ToJson(System.Data.Common.DbDataReader)">
            <summary> 
            DataReader转换为Json 
            </summary> 
            <param name="dataReader">DataReader对象</param> 
            <returns>Json字符串</returns> 
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.DataTableToDictionary(System.Data.DataTable)">
            <summary>
            Datatable转换为Json 2
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.DeserializeJsonToList``1(System.String)">
            <summary>
            解析JSON数组生成对象实体集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">json数组字符串(eg.[{"ID":"112","Name":"石子儿"}])</param>
            <returns>对象实体集合</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.JsonHelper.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            反序列化JSON到给定的匿名对象.
            </summary>
            <typeparam name="T">匿名对象类型</typeparam>
            <param name="json">json字符串</param>
            <param name="anonymousTypeObject">匿名对象</param>
            <returns>匿名对象</returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.ListHelper">
            <summary>
             List辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ListHelper.ToDataTable(System.Collections.IList)">
            <summary>
            将指定的集合转换成DataTable。
            </summary>
            <param name="list">将指定的集合。</param>
            <returns>返回转换后的DataTable。</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ListHelper.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将指定的集合转换成DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.MathHelper">
            <summary>
             Math辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.MathHelper.RandValidateCode(System.Int32,System.Int32)">
            <summary>
            生成N位随机数 
            </summary>
            <param name="N">N位随机数</param>
            <param name="needChar">字符串</param>
            <returns>生成的N位随机数</returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.ModelConvertHelper`1">
            <summary>
            Model辅助类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ModelConvertHelper`1.FillModel(System.Data.DataSet)">
            <summary>
            填充对象列表
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ModelConvertHelper`1.FillModel(System.Data.DataTable)">
            <summary>
            填充对象列表
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ModelConvertHelper`1.FillModeldr(System.Data.DataRow)">
            <summary>
            填充对象
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.ObjectHelper">
            <summary>
            Object辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.IsNumeric(System.Object)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.IsNumeric(System.String)">
            <summary>
            判断对象是否为Int32类型的数字
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.IsDouble(System.Object)">
            <summary>
            是否为Double类型
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.GetStrArray(System.String)">
            <summary>
            将字符串转换为数组
            </summary>
            <param name="str">字符串</param>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.GetArrayStr(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            将数组转换为字符串
            </summary>
            <param name="list">List</param>
            <param name="speater">分隔符</param>
            <returns>String</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.StrToBool(System.Object,System.Boolean)">
            <summary>
            object型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.StrToBool(System.String,System.Boolean)">
            <summary>
            string型转换为bool型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.ObjToInt(System.Object,System.Int32)">
            <summary>
            将对象转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.StrToInt(System.String,System.Int32)">
            <summary>
            将字符串转换为Int32类型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.ObjToDecimal(System.Object,System.Decimal)">
            <summary>
            Object型转换为decimal型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的decimal类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.StrToDecimal(System.String,System.Decimal)">
            <summary>
            string型转换为decimal型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的decimal类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.ObjToFloat(System.Object,System.Single)">
            <summary>
            Object型转换为float型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.StrToFloat(System.String,System.Single)">
            <summary>
            string型转换为float型
            </summary>
            <param name="expression">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.StrToDateTime(System.String,System.DateTime)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.StrToDateTime(System.String)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.ObjectToDateTime(System.Object)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="obj">要转换的对象</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.ObjectToDateTime(System.Object,System.DateTime)">
            <summary>
            将对象转换为日期时间类型
            </summary>
            <param name="obj">要转换的对象</param>
            <param name="defValue">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ObjectHelper.ObjectToStr(System.Object)">
            <summary>
            将对象转换为字符串
            </summary>
            <param name="obj">要转换的对象</param>
            <returns>转换后的string类型结果</returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.StringHelper">
            <summary>
            String辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.GetStrArray(System.String,System.Char,System.Boolean)">
            <summary>
            把字符串按照分隔符转换成 List
            </summary>
            <param name="str">源字符串</param>
            <param name="speater">分隔符</param>
            <param name="toLower">是否转换为小写</param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.GetStrArray(System.String)">
            <summary>
            把字符串转 按照, 分割 换为数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Nzh.Frame.Common.Helper.StringHelper.GetArrayStr(System.Collections.Generic.List{System.String},System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.GetArrayStr(System.Collections.Generic.List{System.Int32})">
            <summary>
            得到数组列表以逗号分隔的字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.GetArrayValueStr(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            得到数组列表以逗号分隔的字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.DelLastComma(System.String)">
            <summary>
            删除最后结尾的一个逗号
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.DelLastChar(System.String,System.String)">
            <summary>
            删除最后结尾的指定字符后的字符
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.ToSBC(System.String)">
            <summary>
            转全角的函数(SBC case)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.ToDBC(System.String)">
            <summary>
             转半角的函数(SBC case)
            </summary>
            <param name="input">输入</param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.GetSubStringList(System.String,System.Char)">
            <summary>
            把字符串按照指定分隔符装成 List 去除重复
            </summary>
            <param name="o_str"></param>
            <param name="sepeater"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.GetCleanStyle(System.String,System.String)">
            <summary>
             将字符串样式转换为纯字符串
            </summary>
            <param name="StrList"></param>
            <param name="SplitString"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.GetNewStyle(System.String,System.String,System.String,System.String@)">
            <summary>
            将字符串转换为新样式
            </summary>
            <param name="StrList"></param>
            <param name="NewStyle"></param>
            <param name="SplitString"></param>
            <param name="Error"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.SplitMulti(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="str"></param>
            <param name="splitstr"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.SqlSafeString(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="String"></param>
            <param name="IsDel"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.StrToId(System.String)">
            <summary>
            获取正确的Id，如果不是正整数，返回0
            </summary>
            <param name="_value"></param>
            <returns>返回正确的整数ID，失败返回0</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.IsNumberId(System.String)">
            <summary>
            检查一个字符串是否是纯数字构成的，一般用于查询字符串参数的有效性验证。(0除外)
            </summary>
            <param name="_value">需验证的字符串。。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.QuickValidate(System.String,System.String)">
            <summary>
            快速验证一个字符串是否符合指定的正则表达式。
            </summary>
            <param name="_express">正则表达式的内容。</param>
            <param name="_value">需验证的字符串。</param>
            <returns>是否合法的bool值。</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.ClipString(System.String,System.Int32)">
            <summary>
            截取指定长度字符串
            </summary>
            <param name="inputString">要处理的字符串</param>
            <param name="len">指定长度</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.IsNullOrEmpty``1(``0)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <typeparam name="T">要验证的对象的类型</typeparam>
            <param name="data">要验证的对象</param>        
        </member>
        <member name="M:Nzh.Frame.Common.Helper.StringHelper.IsNullOrEmpty(System.Object)">
            <summary>
            判断对象是否为空，为空返回true
            </summary>
            <param name="data">要验证的对象</param>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.TimeHelper">
            <summary>
             Time辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.TimeHelper.ConvertToTimeStamp(System.DateTime)">
            <summary>
            日期转换为时间戳（时间戳单位秒）
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.TimeHelper.ConvertToDateTime(System.Int64)">
            <summary>
            时间戳转换为日期（时间戳单位秒）
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.TimeHelper.GetStartDateTime(System.DateTime)">
            <summary>
            获取以0点0分0秒开始的日期
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.TimeHelper.GetEndDateTime(System.DateTime)">
            <summary>
            获取以23点59分59秒结束的日期
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Helper.ValidateCodeHelper">
            <summary>
            验证码辅助类
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Helper.ValidateCodeHelper.CreateValidateCode(System.Int32)">
            <summary>
            生成几位的验证码
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Nzh.Frame.Common.Logger.Logger">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:Nzh.Frame.Common.Logger.Logger.Info(System.String,System.Exception)">
            <summary>
            普通日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Nzh.Frame.Common.Logger.Logger.Warn(System.String,System.Exception)">
            <summary>
            告警日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Nzh.Frame.Common.Logger.Logger.Error(System.String,System.Exception)">
            <summary>
            错误日志
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
    </members>
</doc>
